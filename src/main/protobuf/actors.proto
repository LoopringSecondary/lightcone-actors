/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.loopring.lightcone";
package org.loopring.lightcone;

message OrderState {
  bytes amount_s = 1;
  bytes amount_b = 2;
  bytes amount_fee = 3;
}

enum OrderStatus {
  NEW = 0;
  PENDING = 1;
  EXPIRED = 2;
  CANCELLED_BY_USER = 3;
  CANCELLED_LOW_BALANCE = 4;
  CANCELLED_LOW_FEE_BALANCE = 5;
  CANCELLED_TOO_MANY_ORDERS = 6;
  CANCELLED_TOO_MANY_FAILED_SETTLEMENTS = 7;
}

message Order {
  string id = 1;
  string token_s = 2;
  string token_b = 3;
  string token_fee = 4;
  bytes amount_s = 5;
  bytes amount_b = 6;
  bytes amount_fee = 7;
  int64 created_at = 8;
  OrderStatus status = 9;
  double wallet_split_percentage = 10;
  OrderState outstanding = 11;
  OrderState reserved = 12;
  OrderState actual = 13;
  OrderState matchable = 14;
}

message ExpectedFill {
  Order order = 1;
  OrderState pending = 2;
  bytes amount_margin = 3;
}

message Ring {
  ExpectedFill maker = 1;
  ExpectedFill taker = 2;
}

///////////////////

enum ErrorCode {
  OK = 0;
  ORDER_INVALID_AMOUNT_S = 1;
}


message BalanceAndAllowance {
  bytes balance = 2;
  bytes allowance = 3;
}

message GetBalanceAndAllowancesReq {
  string address = 1;
  repeated string tokens = 2;
}

message GetBalanceAndAllowancesResp {
  string address = 1;
  map<string, BalanceAndAllowance> balance_and_allowance_map = 2;
}

message GetFilledAmountReq {
  repeated string order_ids = 1;
}
message GetFilledAmountResp {
  map<string, bytes> filled_amount_s_map = 1;
}
message UpdateFilledAmountReq {
  map<string, bytes> filled_amount_s_map = 1;
}

message SubmitOrderReq {
  Order order = 1;
}

message SubmitOrderResp {
  ErrorCode error = 1;
  Order order = 2;
}
